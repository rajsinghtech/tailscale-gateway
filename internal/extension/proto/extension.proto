// Copyright Tailscale Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

syntax = "proto3";

package tailscale.gateway.extension;

import "envoy/config/cluster/v3/cluster.proto";
import "envoy/config/listener/v3/listener.proto";
import "envoy/config/route/v3/route_components.proto";
import "envoy/extensions/transport_sockets/tls/v3/secret.proto";

option go_package = "github.com/rajsinghtech/tailscale-gateway/internal/extension/proto";

// EnvoyGatewayExtension service implements the Envoy Gateway extension hooks
// for dynamic route and cluster injection based on Tailscale network topology.
service EnvoyGatewayExtension {
    // PostRouteModify provides a way for the extension to modify individual routes 
    // generated by Envoy Gateway before they are finalized.
    rpc PostRouteModify (PostRouteModifyRequest) returns (PostRouteModifyResponse) {};

    // PostVirtualHostModify provides a way for the extension to modify a VirtualHost 
    // generated by Envoy Gateway and inject entirely new routes based on Tailscale 
    // service discovery.
    rpc PostVirtualHostModify(PostVirtualHostModifyRequest) returns (PostVirtualHostModifyResponse) {};

    // PostHTTPListenerModify allows the extension to modify HTTP listeners
    // generated by Envoy Gateway before they are finalized.
    rpc PostHTTPListenerModify(PostHTTPListenerModifyRequest) returns (PostHTTPListenerModifyResponse) {};

    // PostTranslateModify allows the extension to inject Tailscale clusters and
    // secrets into the xDS configuration. This enables dynamic cluster creation
    // for discovered Tailscale services.
    rpc PostTranslateModify(PostTranslateModifyRequest) returns (PostTranslateModifyResponse) {};
}

// PostRouteModifyRequest sends a Route that was generated by Envoy Gateway 
// along with context information so that the Route can be modified
message PostRouteModifyRequest {
    envoy.config.route.v3.Route route = 1;
    PostRouteExtensionContext post_route_context = 2;
}

// PostRouteModifyResponse contains a modified version of the Route that was sent
message PostRouteModifyResponse {
    envoy.config.route.v3.Route route = 1;
}

// PostVirtualHostModifyRequest sends a VirtualHost that was generated by Envoy Gateway 
// along with context information so that routes can be injected
message PostVirtualHostModifyRequest {
    envoy.config.route.v3.VirtualHost virtual_host = 1;
    PostVirtualHostExtensionContext post_virtual_host_context = 2;
}

// PostVirtualHostModifyResponse contains a modified version of the VirtualHost
message PostVirtualHostModifyResponse {
    envoy.config.route.v3.VirtualHost virtual_host = 1;
}

// PostHTTPListenerModifyRequest sends a Listener that was generated by Envoy Gateway
message PostHTTPListenerModifyRequest {
    envoy.config.listener.v3.Listener listener = 1;
    PostHTTPListenerExtensionContext post_listener_context = 2;
}

// PostHTTPListenerModifyResponse contains a modified version of the Listener
message PostHTTPListenerModifyResponse {
    envoy.config.listener.v3.Listener listener = 1;
}

// PostTranslateModifyRequest sends clusters and secrets to the extension
message PostTranslateModifyRequest {
    PostTranslateExtensionContext post_translate_context = 1;
    repeated envoy.config.cluster.v3.Cluster clusters = 2;
    repeated envoy.extensions.transport_sockets.tls.v3.Secret secrets = 3;
}

// PostTranslateModifyResponse contains the full list of xDS clusters and secrets
message PostTranslateModifyResponse {
    repeated envoy.config.cluster.v3.Cluster clusters = 1;
    repeated envoy.extensions.transport_sockets.tls.v3.Secret secrets = 2;
}

// Extension context messages (simplified for now)

message PostRouteExtensionContext {
    string gateway_name = 1;
    string gateway_namespace = 2;
    repeated string domains = 3;
}

message PostVirtualHostExtensionContext {
    string gateway_name = 1;
    string gateway_namespace = 2;
    repeated string domains = 3;
}

message PostHTTPListenerExtensionContext {
    string gateway_name = 1;
    string gateway_namespace = 2;
    string listener_name = 3;
}

message PostTranslateExtensionContext {
    string gateway_name = 1;
    string gateway_namespace = 2;
}