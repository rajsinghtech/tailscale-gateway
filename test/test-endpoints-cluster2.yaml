apiVersion: gateway.tailscale.com/v1alpha1
kind: TailscaleEndpoints
metadata:
  name: cluster2-endpoints
  namespace: default
  labels:
    cluster: cluster2
spec:
  tailnet: test-tailnet
  endpoints:
  # Manual endpoints for cluster2 services
  - name: cluster2-web
    tailscaleIP: "100.64.0.20"
    tailscaleFQDN: "cluster2-web.tail12345.ts.net"
    port: 80
    protocol: "HTTP"
    externalTarget: "test-service.default.svc.cluster.local:80"
    tags: ["tag:k8s-operator"]
    weight: 2  # Higher weight for cluster2
    healthCheck:
      enabled: true
      path: "/health"
      interval: "30s"
  - name: cluster2-api
    tailscaleIP: "100.64.0.21"  
    tailscaleFQDN: "cluster2-api.tail12345.ts.net"
    port: 8080
    protocol: "HTTP"
    externalTarget: "api-service.default.svc.cluster.local:8080"
    tags: ["tag:k8s-operator"]
    weight: 2  # Higher weight for cluster2
    healthCheck:
      enabled: true
      path: "/api/health"
      interval: "30s"
  autoDiscovery:
    enabled: true
    # New tag-based discovery
    tagSelectors:
    - tag: "tag:k8s-operator"
      operator: "Exists"
    # VIP service discovery
    serviceDiscovery:
      enabled: true
      serviceNames:
      - "svc:cluster2-web"
      - "svc:cluster2-api"
      serviceTags:
      - "tag:vip"
      - "tag:cluster2"
    # Legacy pattern support (deprecated)
    includePatterns: ["*cluster2*", "*web*", "*api*"]
    excludePatterns: ["*test*", "*debug*"]
    requiredTags: ["tag:service"]
    syncInterval: "30s"
---
apiVersion: v1
kind: Service
metadata:
  name: test-service
  namespace: default
  labels:
    app: test-service
    cluster: cluster2
spec:
  ports:
  - port: 80
    targetPort: 80
    name: http
  selector:
    app: test-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-service
  namespace: default
  labels:
    app: test-service
    cluster: cluster2
spec:
  replicas: 3  # More replicas in cluster2
  selector:
    matchLabels:
      app: test-service
  template:
    metadata:
      labels:
        app: test-service
        cluster: cluster2
    spec:
      containers:
      - name: service
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /etc/nginx/nginx.conf << 'EOF'
          events {}
          http {
            server {
              listen 80;
              location / {
                return 200 'Cluster2 Service - Load Balanced!\nHostname: $hostname\nTime: $time_iso8601\nReplicas: 3\n';
                add_header Content-Type text/plain;
              }
              location /health {
                return 200 'healthy';
                add_header Content-Type text/plain;
              }
            }
          }
          EOF
          nginx -g 'daemon off;'
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: default
  labels:
    app: api-service
    cluster: cluster2
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: api
  selector:
    app: api-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: default
  labels:
    app: api-service
    cluster: cluster2
spec:
  replicas: 3  # More replicas in cluster2
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
        cluster: cluster2
    spec:
      containers:
      - name: api
        image: nginx:alpine
        ports:
        - containerPort: 8080
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /etc/nginx/nginx.conf << 'EOF'
          events {}
          http {
            server {
              listen 8080;
              location / {
                return 200 '{"message":"Cluster2 API","hostname":"$hostname","timestamp":"$time_iso8601","replicas":3}\n';
                add_header Content-Type application/json;
              }
              location /api/health {
                return 200 '{"status":"healthy","cluster":"cluster2","replicas":3}';
                add_header Content-Type application/json;
              }
            }
          }
          EOF
          nginx -g 'daemon off;'