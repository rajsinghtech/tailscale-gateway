apiVersion: gateway.tailscale.com/v1alpha1
kind: TailscaleServices
metadata:
  name: auto-web-service
spec:
  # Selector for endpoints (none exist initially)
  selector:
    matchLabels:
      app: auto-web
      tier: frontend

  # VIP service configuration
  vipService:
    name: "svc:auto-web-service"
    ports:
      - "tcp:80"
      - "tcp:443"
    tags:
      - "tag:test"
    comment: "Auto-provisioned web service"
    
  # Load balancing
  loadBalancing:
    strategy: round-robin
    healthCheck:
      path: "/health"
      interval: "30s"

  # EndpointTemplate for auto-provisioning TailscaleEndpoints
  endpointTemplate:
    tailnet: test-tailnet
    
    # Tags for the Tailscale machines
    tags:
      - "tag:web"
    
    # Proxy configuration
    proxy:
      replicas: 3
      connectionType: bidirectional
    
    # Ports to serve
    ports:
      - port: 80
        protocol: TCP
      - port: 443
        protocol: TCP
    
    # Labels to apply (must match selector above)
    labels:
      app: auto-web
      tier: frontend
      auto-provisioned: "true"
    
    # Name suffix for created endpoints
    nameSuffix: "-proxies"

# Result:
# 1. TailscaleServices "auto-web-service" created
# 2. No TailscaleEndpoints match selector â†’ auto-provision
# 3. TailscaleEndpoints "auto-web-service-proxies" created with:
#    - labels: {app: auto-web, tier: frontend, auto-provisioned: "true"}
#    - tailnet: demo-tailnet
#    - tags: ["tag:k8s-proxy", "tag:auto-web"]
#    - proxy config: 3 replicas, bidirectional
#    - ports: 80 (TCP), 443 (TCP)
# 4. TailscaleEndpoints controller creates proxy StatefulSets:
#    - auto-web-service-proxies-ingress (3 replicas)
#    - auto-web-service-proxies-egress (3 replicas)
#    - Headless services for each StatefulSet
# 5. TailscaleServices controller creates VIP service "svc:auto-web-service"
# 6. Service accessible at: auto-web-service.ts.net