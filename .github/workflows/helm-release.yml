name: Helm Chart Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  CHART_NAME: tailscale-gateway-operator

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Verify generated files exist
      run: |
        if [ ! -f "api/v1alpha1/zz_generated.deepcopy.go" ]; then
          echo "Error: Generated deepcopy file missing. Please run 'make generate' and commit."
          exit 1
        fi
        echo "Generated files verification passed âœ“"

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        CLEAN_VERSION=${VERSION#v}
        echo "full=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean=${CLEAN_VERSION}" >> $GITHUB_OUTPUT

    - name: Update chart version
      run: |
        sed -i "s/version: .*/version: ${{ steps.version.outputs.clean }}/" cmd/main/deploy/chart/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${{ steps.version.outputs.full }}\"/" cmd/main/deploy/chart/Chart.yaml

    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

    - name: Package and push Helm chart
      run: |
        helm package cmd/main/deploy/chart --version ${{ steps.version.outputs.clean }} --app-version ${{ steps.version.outputs.full }}
        helm push ${CHART_NAME}-${{ steps.version.outputs.clean }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts

    - name: Upload chart to release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.CHART_NAME }}-${{ steps.version.outputs.clean }}.tgz
        asset_name: ${{ env.CHART_NAME }}-${{ steps.version.outputs.clean }}.tgz
        asset_content_type: application/gzip